
Js code execute inside browser (using js engine which is present only in browser)
executinh js code outside browser was not possible

chrome -> v8 engine
firefox -> spider monkey

v8 engine embedded with c++ => node.js

# Node.js (Runtime environment for js)

1) we can run js outside of the browser
2) js can talk to native machine because of c++
3) we can create webserver in js language

window objects is not present with node.js (like alert() etc..)

...............................................................

# Modules

split files into smaller code

build in modules -> http, fs, os, crypto, url

const url = require("url")

const myUrl = url.parse(req.url)
..........................................


How node.js works

request -> event queue -> event loop (it watches event queue and take request from it) -> 
if(request is non blocking (Async)) it will return response
else if (request is blocking (Sync)) it will tell thread pool that it need worker/thread to complete the work
   then return request


.....................................................................

http methods

Get -> when want to send some data from server
Post -> Submit data to server
Put -> Update resource or create it if it doesn't exist.
Patch -> Apply partial modifications to a resource.
Delete -> Request removal of resource.

.............................................................

Express :- node js framework

in node.js we handle everything from scratch

..............................
Versioning

example :- 18.2.1
1 :- Minor fixes (Uptional update)
2 :- Recommended bug fix (or feature added)
18 :- Mojor release/ can break existing code


^version :- compatible with version  (update ony minor and recommended , not major release)
~version :- only update minor fixes

...................................................

SSR => server side rendering -> render at server and send to rendered data to client (fast and secure)
CSR => client side rendering -> send data like in JSON then client read json data & render on screen

....................................................

Middleware

Middleware functions in Express are functions that have access to the request object (req), 
the response object (res), and the next middleware function in the application’s request-response cycle.
Middleware functions can perform various tasks, modify the request and response objects, 
end the request-response cycle, and call the next middleware in the stack.

built-in middleware functions

1) express.json()
This middleware is used to parse incoming JSON requests. 
It adds a body property to the request object containing the parsed JSON data.

2) express.urlencoded()
This middleware is used to parse incoming requests with URL-encoded data. 
It populates the req.body with the key-value pairs.
extended: true -> Supports nested objects and arrays in the URL-encoded data.
extended : false -> Does not support nested objects or arrays in the URL-encoded data.

3) express.static('public')
This middleware is used to serve static files, such as images, CSS, and JavaScript files.
This assumes that your static files are in the "public" directory.

4) cookie-parser
app.use(cookieParser());

5) morgan, helmet

This middleware is used to parse cookies attached to the client's request and populate
req.cookies with an object keyed by the cookie names.

....................................................

ejs :- embedded javascript
templating engine

1) app.set("view engine", "ejs"):

This line sets the view engine for your Express application to EJS (Embedded JavaScript). 
EJS is a templating engine that allows you to embed JavaScript code directly into your HTML templates. 
When you render a view in your Express application, it will use EJS to process the templates.

After setting the view engine, Express assumes that your views (templates) will have the file 
extension specified (in this case, .ejs). 

2) app.set("views", path.resolve("./views")):

This line sets the directory where Express will look for the view templates

3) Port Configuration:
app.set("port", process.env.PORT || 3000);

This line sets the port on which the Express application will listen. 
It uses the value of the environment variable PORT if available; otherwise, it defaults to port 3000.

4) Environment Configuration:

app.set("env", process.env.NODE_ENV || "development");
........................................................

http headers are an imp part of the API request and response as they represent the meta-data
associate with the API request and response.

headers carry information for the request and response body

....................................................

Mongoose provides a variety of functions for interacting with MongoDB

1) find :- const users = await User.find({ role: 'admin' });
It used to retrieve multiple documents from a collection based on a query.

2) findOne :- const user = await User.findOne({ username: 'john_doe' });
Similar to find, but it returns only the first document that matches the query.

3) updateOne and updateMany :- await User.updateOne({ username: 'john_doe' }, { $set: { password: 'new_password' } });
Used to update a single document (updateOne) or multiple documents (updateMany) that match the specified filter.

4) deleteOne and deleteMany :- await User.deleteOne({ username: 'john_doe' });

5) findOneAndDelete, findOneAndRemove, findOneAndReplace, findOneAndUpdate
const deletedUser = await User.findOneAndDelete({ username: 'john_doe' });

6) countDocuments :- const count = await User.countDocuments({ role: 'admin' });
Counts the number of documents in a collection that match the specified filter.


...............................................................

Status code

Informational responses (100 – 199)
Successful responses (200 – 299)
Redirection messages (300 – 399)
Client error responses (400 – 499)
Server error responses (500 – 599)

200 -> request succeeded
201 -> created
204 -> There is no content to send for this request, but the headers may be useful
400 -> bad request (client error)
401 -> unauthorized
403 -> does not have access rights
404 -> server cannot find the requested resource
500 -> (Internal server error) he server has encountered a situation it does not know how to handle.
501 -> Not Implemented
504 -> Gateway Timeout (cannot get a response in time)

...................................

MongoDb

No-Sql document based db 
works on BSON format

.....................................

Server side rendering

web page render from server

templating engines
EJS :- embedded javascript templating
Pug js
handlebar

ejs code
    <!-- <% urls.forEach(url => { %>
        <li> <%= url.shortId %></li>
   <%
    })%> -->

......................................

Authentication

Auth patterns
1) Statefull :- Which maintains state or data on server side
example :- if i give username and password to server it will give me sesson uid, user with that uid can request to server
if user request to server with that uid , server will check who is user with that specific id and if valid then return the response

How to tranfer uid :- cookies, response, headers

users logged out if we restart server
it's memory intensive (server have Limited memory )

client -> Auth meddleware (checks for cookies values or uid , if valid calls next(), else reject the request) -> endpoint route

2) Stateless :- Which has no state

uuid :- generate session id

..................................................

server creates JWT token , but how server send this to client in secure way?
1) cookies -> res.cookie...
  server creates cookie..
  browsers store cookie and send to server when client request something from server (default behavior of browser)

  cookies are domain specific,
  we can set parameters -> domain, expire....etc

  domain -> .google.com -> if we logged in gmail, and when we open youtube it will automatically open with same email id
      (using same cookie for .google.com domain)

2) response

server will create token 
 res.json({token})
 now it's user responsibility to user this token

 but how to get this token from server?

// one way
 header : {
    Token : token
 }

 // standard way
 header : {
    Authentication: "Beaer <token>"
 }

 in code

 res.cookie("uid", token) --> return res.json({token})

 in middleware
  userid = req.header?['authentication']

  token = userid.split('Bearer')[1]

  ............................................

  Authentication :- User belongs to that particular application
  Authorization :- checking for a particular resouce are you authorize to access that?
  
  ........................................................

  package :- express status monitor

  ....................................................

  Streams in node.js

  read chunk by chunk and send chunks in response , don't wait to load complete data and store in memory.

  app.get('/', (req,res) => {
    const stream = fs.createReadStream("file-name", "utf-8");
    stream.on("data", (chunk) => res.write(chunk));
    stream.on("end", () => res.end())
  })

  in header -> Transfer-encoding : chunked

  zlib package :- to zip file

  // stream Read (Sample.txt) --> zipper --> fs write stream (pipeline)

  fs.createReadStream("./sample.txt").pipe(zlib.createGzip().pipe(fs.createWriteStream("./sample.zip)))

  // read node.js stream documentation

...............................................................................

How to scale node.js application 

Cluster

Clusters of Node.js processes can be used to run multiple instances 
of Node.js that can distribute workloads among their application threads.

..............................................

Accessibility- A11y

The goal of accessibility is to provide equal access and opportunities
 for everyone, regardless of their abilities or disabilities.

 1) Use semantic HTML tags (e.g., <nav>, <main>, <section>) to provide a clear structure to your content. 

 2) Provide Alternative Text for Images:
 3) Keyboard Navigation:
 4) use Focus for currently focused element
 5) Contrast and Color:
  