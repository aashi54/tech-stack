
Js code execute inside browser (using js engine which is present only in browser)
executinh js code outside browser was not possible

chrome -> v8 engine
firefox -> spider monkey

v8 engine embedded with c++ => node.js

# Node.js (Runtime environment for js)

1) we can run js outside of the browser
2) js can talk to native machine because of c++
3) we can create webserver in js language

window objects is not present with node.js (like alert() etc..)

...............................................................

# Modules

split files into smaller code

build in modules -> http, fs, os, crypto, url

const url = require("url")

const myUrl = url.parse(req.url)
..........................................


How node.js works

request -> event queue -> event loop (it watches event queue and take request from it) -> 
if(request is non blocking (Async)) it will return response
else if (request is blocking (Sync)) it will tell thread pool that it need worker/thread to complete the work
   then return request


.....................................................................

http methods

Get -> when want to send some data from server
Post -> Submit data to server
Put -> Update resource or create it if it doesn't exist.
Patch -> Apply partial modifications to a resource.
Delete -> Request removal of resource.

.............................................................

Express :- node js framework

in node.js we handle everything from scratch

..............................
Versioning

example :- 18.2.1
1 :- Minor fixes (Uptional update)
2 :- Recommended bug fix (or feature added)
18 :- Mojor release/ can break existing code


^version :- compatible with version  (update ony minor and recommended , not major release)
~version :- only update minor fixes

...................................................

SSR => server side rendering -> render at server and send to rendered data to client (fast and secure)
CSR => client side rendering -> send data like in JSON then client read json data & render on screen

....................................................

Middleware

Middleware functions can perform the following tasks:

Execute any code.
Make changes to the request and the response objects.
End the request-response cycle.
Call the next middleware function in the stack.

....................................................

http headers are an imp part of the API request and response as they represent the meta-data
associate with the API request and response.

headers carry information for the request and response body

....................................................

Status code

Informational responses (100 – 199)
Successful responses (200 – 299)
Redirection messages (300 – 399)
Client error responses (400 – 499)
Server error responses (500 – 599)

200 -> request succeeded
201 -> created
204 -> There is no content to send for this request, but the headers may be useful
400 -> bad request (client error)
401 -> unauthorized
403 -> does not have access rights
404 -> server cannot find the requested resource
500 -> (Internal server error) he server has encountered a situation it does not know how to handle.
501 -> Not Implemented
504 -> Gateway Timeout (cannot get a response in time)

...................................

MongoDb

No-Sql document based db 
works on BSON format

.....................................

Server side rendering

web page render from server

templating engines
EJS :- embedded javascript templating
Pug js
handlebar

    <!-- <% urls.forEach(url => { %>
        <li> <%= url.shortId %></li>
   <%
    })%> -->